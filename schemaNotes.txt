David Segleau
Director of Technical Product Marketing, Couchbase
Slides: NoSQL Data Modeling Using JSON Documents â€“ A Practical Approach
url: http://www.dataversity.net/slides-nosql-data-modeling-using-json-documents-practical-approach/
Notes:
if -> then
Relationship is one-to-one or one-to-many -> Store related data as nested objects
Relationship is many-to-one or many-to-many -> Store related data as separate documents
Data reads are mostly parent fields -> Store children as separate documents
Data reads are mostly parent + child fields -> Store children as nested objects
Data writes are mostly parent or child (not both) -> Store children as separate objects
Data writes are mostly parent and child (both) -> Store children as nested objects

Are there a lot of concurrent writes, continuous updates?
-Store children as separate documents


url: https://dzone.com/articles/data-modeling-guidelines-for-nosql-json-document-d
Entities: Main objects in your application
Attributes: Properties of the objects in your application
Relationships: Connections between entities, i.e. 1-1, 1-many, many-many

Entity-Relationship Diagram
url: https://www.smartdraw.com/entity-relationship-diagram/


--------------------------------------------------------------------------------

Entities:
- Boxes
- Device
- Users
- Schedules

boxes: {
	key: {
		devices: {
			key: {
				devices: {
					key: {
						readings: {
							key: {
								timestamp: '',
								readings: {}
							},
							key2: ...
						}
					},
					key2: ...
				}
			},
			key2: ...
		}
	},
	key2: ...
},
users: {
	key: {
		boxes: [ //We might not want this to be an array.
			key1,
			key2,
			...
		],
		layouts: {
			key: {
				columns: [
					{
						order: 0,
						boxes: [
							{
								order: 0,
								key: ''
							},
							...
						]
					},
					...
				]
			},
			key2: ...
		}
	},
	key2: ...
},
schedules: { //This might get nested in user object instead or box actually
							//probably neither because it needs to be reference in both
	key: {
		TODO,
		boxes: [
			key1,
			key2,
			...
		]
	},
	key2: ...
}




??????
rasppi: {
	?: ?
}



// Other notes

boxes: {
	id0: {},
	id1: {},
	id2: {},
	id3: {},
	id4: {},
	id5: {},
	id6: {},
	id7: {},
	id8: {},
	id9: {},
	id10: {}
}

[
	"hello",
	"there"
]

{
	0: "hello",
	1: "hello"
}

animal = {
	type: 'dog',
	name: 'archie',
	greeting: bark
}
